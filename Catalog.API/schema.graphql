schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

interface Error {
  message: String!
}

type AddAuthorPayload {
  author: Author
}

type AddBookPayload {
  book: Book
}

"Represents an author of books"
type Author {
  "The unique identifier of the author"
  id: UUID!
  "The full name of the author"
  name: String!
  "A biographical summary of the author"
  biography: String!
  "The author's date of birth"
  dateOfBirth: DateTime!
  "The nationality of the author"
  nationality: String!
  "The author's contact email"
  email: String!
  "The books written by this author"
  books: [Book!]!
}

"Represents a book in the catalog"
type Book {
  "The unique identifier of the book"
  id: UUID!
  "The title of the book"
  title: String!
  "A description or summary of the book"
  description: String!
  "The International Standard Book Number"
  isbn: String!
  "The date when the book was published"
  publishedDate: DateTime!
  "The price of the book"
  price: Decimal!
  "The genre or category of the book"
  genre: String!
  "The total number of pages in the book"
  pageCount: Int!
  "The ID of the author who wrote this book"
  authorId: UUID!
}

"A connection to a list of items."
type BooksConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [BooksEdge!]
  "A flattened list of the nodes."
  nodes: [Book!]
}

"An edge in a connection."
type BooksEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Book!
}

type DeleteAuthorPayload {
  boolean: Boolean
}

type DeleteBookPayload {
  boolean: Boolean
}

type Mutation {
  "Add a new book to the catalog"
  addBook(input: AddBookInput!): AddBookPayload! @cost(weight: "10")
  "Update an existing book"
  updateBook(input: UpdateBookInput!): UpdateBookPayload! @cost(weight: "10")
  "Delete a book from the catalog"
  deleteBook(input: DeleteBookInput!): DeleteBookPayload! @cost(weight: "10")
  "Add a new author"
  addAuthor(input: AddAuthorInput!): AddAuthorPayload! @cost(weight: "10")
  "Update an existing author"
  updateAuthor(input: UpdateAuthorInput!): UpdateAuthorPayload! @cost(weight: "10")
  "Delete an author and all their books"
  deleteAuthor(input: DeleteAuthorInput!): DeleteAuthorPayload! @cost(weight: "10")
}

"Information about pagination in a connection."
type PageInfo {
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
  "When paginating forwards, the cursor to continue."
  endCursor: String
}

type Query {
  "Get all books in the catalog"
  books("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: BookFilterInput @cost(weight: "10") order: [BookSortInput!] @cost(weight: "10")): BooksConnection @listSize(assumedSize: 50, slicingArguments: [ "first", "last" ], slicingArgumentDefaultValue: 10, sizedFields: [ "edges", "nodes" ], requireOneSlicingArgument: false) @cost(weight: "10")
  "Get a book by its ID"
  bookById(id: UUID!): Book @cost(weight: "10")
  "Get books by genre"
  booksByGenre(genre: String!): [Book!]! @cost(weight: "10")
  "Search books by title"
  searchBooks(searchTerm: String!): [Book!]! @cost(weight: "10")
  "Get all authors"
  authors: [Author!]! @cost(weight: "10")
  "Get an author by ID"
  authorById(id: UUID!): Author @cost(weight: "10")
  "Get authors with their books"
  authorsWithBooks: [Author!]! @cost(weight: "10")
}

type Subscription {
  "Subscription for when a book is added"
  bookAdded: Book!
  "Subscription for when a book is updated"
  bookUpdated: Book!
  "Subscription for when a book is deleted"
  bookDeleted: UUID!
  "Subscription for when an author is added"
  authorAdded: Author!
  "Subscription for when an author is updated"
  authorUpdated: Author!
  "Subscription for when an author is deleted"
  authorDeleted: UUID!
}

type UpdateAuthorPayload {
  author: Author
}

type UpdateBookPayload {
  book: Book
}

input AddAuthorInput {
  name: String!
  biography: String! = ""
  dateOfBirth: DateTime
  nationality: String! = ""
  email: String! = ""
}

input AddBookInput {
  title: String!
  authorId: UUID!
  description: String! = ""
  isbn: String! = ""
  publishedDate: DateTime
  price: Decimal! = 0
  genre: String! = ""
  pageCount: Int! = 0
}

input AuthorFilterInput {
  and: [AuthorFilterInput!]
  or: [AuthorFilterInput!]
  id: UuidOperationFilterInput
  name: StringOperationFilterInput
  biography: StringOperationFilterInput
  dateOfBirth: DateTimeOperationFilterInput
  nationality: StringOperationFilterInput
  email: StringOperationFilterInput
  books: ListFilterInputTypeOfBookFilterInput
}

input AuthorSortInput {
  id: SortEnumType @cost(weight: "10")
  name: SortEnumType @cost(weight: "10")
  biography: SortEnumType @cost(weight: "10")
  dateOfBirth: SortEnumType @cost(weight: "10")
  nationality: SortEnumType @cost(weight: "10")
  email: SortEnumType @cost(weight: "10")
}

"Represents a book."
input BookFilterInput {
  and: [BookFilterInput!]
  or: [BookFilterInput!]
  id: UuidOperationFilterInput
  title: StringOperationFilterInput
  description: StringOperationFilterInput
  "ISBN number of the book."
  isbn: StringOperationFilterInput
  publishedDate: DateTimeOperationFilterInput
  price: DecimalOperationFilterInput
  genre: StringOperationFilterInput
  pageCount: IntOperationFilterInput
  authorId: UuidOperationFilterInput
  author: AuthorFilterInput
}

"Represents a book."
input BookSortInput {
  id: SortEnumType @cost(weight: "10")
  title: SortEnumType @cost(weight: "10")
  description: SortEnumType @cost(weight: "10")
  "ISBN number of the book."
  isbn: SortEnumType @cost(weight: "10")
  publishedDate: SortEnumType @cost(weight: "10")
  price: SortEnumType @cost(weight: "10")
  genre: SortEnumType @cost(weight: "10")
  pageCount: SortEnumType @cost(weight: "10")
  authorId: SortEnumType @cost(weight: "10")
  author: AuthorSortInput @cost(weight: "10")
}

input DateTimeOperationFilterInput {
  eq: DateTime @cost(weight: "10")
  neq: DateTime @cost(weight: "10")
  in: [DateTime] @cost(weight: "10")
  nin: [DateTime] @cost(weight: "10")
  gt: DateTime @cost(weight: "10")
  ngt: DateTime @cost(weight: "10")
  gte: DateTime @cost(weight: "10")
  ngte: DateTime @cost(weight: "10")
  lt: DateTime @cost(weight: "10")
  nlt: DateTime @cost(weight: "10")
  lte: DateTime @cost(weight: "10")
  nlte: DateTime @cost(weight: "10")
}

input DecimalOperationFilterInput {
  eq: Decimal @cost(weight: "10")
  neq: Decimal @cost(weight: "10")
  in: [Decimal] @cost(weight: "10")
  nin: [Decimal] @cost(weight: "10")
  gt: Decimal @cost(weight: "10")
  ngt: Decimal @cost(weight: "10")
  gte: Decimal @cost(weight: "10")
  ngte: Decimal @cost(weight: "10")
  lt: Decimal @cost(weight: "10")
  nlt: Decimal @cost(weight: "10")
  lte: Decimal @cost(weight: "10")
  nlte: Decimal @cost(weight: "10")
}

input DeleteAuthorInput {
  id: UUID!
}

input DeleteBookInput {
  id: UUID!
}

input IntOperationFilterInput {
  eq: Int @cost(weight: "10")
  neq: Int @cost(weight: "10")
  in: [Int] @cost(weight: "10")
  nin: [Int] @cost(weight: "10")
  gt: Int @cost(weight: "10")
  ngt: Int @cost(weight: "10")
  gte: Int @cost(weight: "10")
  ngte: Int @cost(weight: "10")
  lt: Int @cost(weight: "10")
  nlt: Int @cost(weight: "10")
  lte: Int @cost(weight: "10")
  nlte: Int @cost(weight: "10")
}

input ListFilterInputTypeOfBookFilterInput {
  all: BookFilterInput @cost(weight: "10")
  none: BookFilterInput @cost(weight: "10")
  some: BookFilterInput @cost(weight: "10")
  any: Boolean @cost(weight: "10")
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String @cost(weight: "10")
  neq: String @cost(weight: "10")
  contains: String @cost(weight: "20")
  ncontains: String @cost(weight: "20")
  in: [String] @cost(weight: "10")
  nin: [String] @cost(weight: "10")
  startsWith: String @cost(weight: "20")
  nstartsWith: String @cost(weight: "20")
  endsWith: String @cost(weight: "20")
  nendsWith: String @cost(weight: "20")
}

input UpdateAuthorInput {
  id: UUID!
  name: String
  biography: String
  dateOfBirth: DateTime
  nationality: String
  email: String
}

input UpdateBookInput {
  id: UUID!
  title: String
  authorId: UUID
  description: String
  isbn: String
  publishedDate: DateTime
  price: Decimal
  genre: String
  pageCount: Int
}

input UuidOperationFilterInput {
  eq: UUID @cost(weight: "10")
  neq: UUID @cost(weight: "10")
  in: [UUID] @cost(weight: "10")
  nin: [UUID] @cost(weight: "10")
  gt: UUID @cost(weight: "10")
  ngt: UUID @cost(weight: "10")
  gte: UUID @cost(weight: "10")
  ngte: UUID @cost(weight: "10")
  lt: UUID @cost(weight: "10")
  nlt: UUID @cost(weight: "10")
  lte: UUID @cost(weight: "10")
  nlte: UUID @cost(weight: "10")
}

enum SortEnumType {
  ASC
  DESC
}

"The purpose of the `cost` directive is to define a `weight` for GraphQL types, fields, and arguments. Static analysis can use these weights when calculating the overall cost of a query or response."
directive @cost("The `weight` argument defines what value to add to the overall cost for every appearance, or possible appearance, of a type, field, argument, etc." weight: String!) on SCALAR | OBJECT | FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM | INPUT_FIELD_DEFINITION

"The purpose of the `@listSize` directive is to either inform the static analysis about the size of returned lists (if that information is statically available), or to point the analysis to where to find that information."
directive @listSize("The `assumedSize` argument can be used to statically define the maximum length of a list returned by a field." assumedSize: Int "The `slicingArguments` argument can be used to define which of the field's arguments with numeric type are slicing arguments, so that their value determines the size of the list returned by that field. It may specify a list of multiple slicing arguments." slicingArguments: [String!] "The `slicingArgumentDefaultValue` argument can be used to define a default value for a slicing argument, which is used if the argument is not present in a query." slicingArgumentDefaultValue: Int "The `sizedFields` argument can be used to define that the value of the `assumedSize` argument or of a slicing argument does not affect the size of a list returned by a field itself, but that of a list returned by one of its sub-fields." sizedFields: [String!] "The `requireOneSlicingArgument` argument can be used to inform the static analysis that it should expect that exactly one of the defined slicing arguments is present in a query. If that is not the case (i.e., if none or multiple slicing arguments are present), the static analysis may throw an error." requireOneSlicingArgument: Boolean! = true) on FIELD_DEFINITION

"The `@specifiedBy` directive is used within the type system definition language to provide a URL for specifying the behavior of custom scalar definitions."
directive @specifiedBy("The specifiedBy URL points to a human-readable specification. This field will only read a result for scalar types." url: String!) on SCALAR

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime @specifiedBy(url: "https:\/\/www.graphql-scalars.com\/date-time")

"The `Decimal` scalar type represents a decimal floating-point number."
scalar Decimal

scalar UUID @specifiedBy(url: "https:\/\/tools.ietf.org\/html\/rfc4122")